---
kind: "Secret"
apiVersion: "v1"
data:
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeVQ2aWNLc0VrcTJ4aE9rNEpySnJqV0VxVWtxRGlaYk1sSkJrM2lJSVpJL0MwQjhHCmk1cTAwQlNxc2ZZMWZaVFadasdadFnc2x5VTlQS2lyODFyN2g1SkVrTFdtOVIxRFpoOU16TE4rL1NSTnAwQWtkRFk5Sm0KUXlEU25KbHFCRDNPcVhNNFlRVGxYT20xVlozUi90Q2lUUklYTU8yeVgxdVZGN0pqOEtuaFRKU3VaOXlRelFRTQp2TXZZd2F5R2lWTkdhd3B6WVZJZzZBZURLTDNXR1V2QjU3eldGbmNKbzljOTU1ekVZRkdWL3dhakZscElhdnMvClkrN01hL1Z6bm42djlFV1RSRlRIbDdyUG5SMjN5bm8wTlN5c3N1WDduT2VsWC9Rc0t0Q0Uwbnd3MUd6SWZ2d0gKQnpxOGlHT09TeDFwK1grMzAyb0cyVlhwUC9wRWkrNk45SVdmcVFJREFRQUJBb0lCQUVQQWdvL01BODRlREJYagpMclJZZlQwcjZVT3JNbjJ2OTFCTkRLaDhiTGJ1YjNnQitnSW1JNW1xVzQxdWhyT3cxa0l4Ny91bzRoZTBLQzd3CnZGZ3EvMWVEQXRtZkdrtdfd5YdGxOMFd0eCt6R1h5Z2xOZHIxaXRndXhMbFVMUTBnZ2VNcWwyQ1NkV1hDaVBvNkYramgKOU1KZHhORUVOWGxGSy95K1lrY3o2bFlOK0dtZWo0ZURPNWc4b1NpcFFBRWFabDl4UE5RakwrVjBaRC90cTlBSQpKbXFKeUFvenRPVnA2RzNwZmlnRWlJTTNUNVhySXl2WE94cTBROXVyU21nbk1uWUxEd3JHd3cxWHZKaUJDUWM1CjdnQlFVMEdSWlcwd3RlelRISzdlTmtUL1h2K3JEeUFDQ0xSb1pLZ2VlVEFremQrZXQ0ZFBlWDlHa3lmL0s4RGsKVmRZUHVNRUNnWUVBNW91bUs5Snd0L3BCaVNzTEY5bGM5OTJxS1owc0V1NVVmLzZlL3J0M2d0cCtBUmVLVXRXRAo0MXYvYlMzWUR1T21DUFBQRzZtaXhUT3UyaHRWTGU0SS9VZkw2VEx6VDZVZ3hYa241RCtla09tUHV3ZkJRREJOCldSdE1hMzVzRVpnR05yMDkzV1BsdFFTT2xOSzNCSkxiL2tNcFhreWtkUVFQaGdvRkJKdVFzK3NDZ1lFQTMzYk0KcTdCWEh0eDExNUFaVUQzZGE5dW1ieDNoMHNENnZrYWdQK1NjWEhoYkVBMjA1eFRjQ0xvSWRCa0hBVE94aXlCYgpaY3N5bkttRzhtVVJ6dWw5citpYWg2YStHanYxMzlmZ281Q1YzVFFHNXU4ZGNzUSs4TDJGaGtOS0xuZy9DcXExCnRTcDNkQndGbVBQZ0E3TzRidzBidE5FQ0xoUDZHK0p4NTdmdzJic0NnWUVBb0Q0UWtnVURNOTFPRC9sTERKaVkKZGZBc2hpQW9zai9WbStGdXdiK3JvZGdjSE1ZdjdzTlptSDRwVzhteGt5ZklFQkRtczJPRkwyeHM3RXh6T0NscgpOaURoS29XdmVIeGQrdVByUmtxeC9DZGJMN1NFTGdsa3VicXZzMGQ3OWY2azB3ZFdLTHQydmdzY3ozUm1vVmN5CmNkaGN1SjZzOEdpU0lhaDFORzZzZFdFQ2dZRUFqWmlpY2Z3SUNEY2J1SjdIVzNBSCtNc3l0K0FRY3RIelVGUkMKUUpva2RmZVJoQ2ViUkgyVU96ZGVHZXF0NUpZVDN4dCtybzdHSUR6UGxKSjBhVTdNWklXWVBYSnJyUVhuYzVJLwo5b1NzWVlFUkNvM2pkQkJqN1htNXZPeXdlYWVhRXJFKytHL1RSMUJtUDVmd2o0ZjJ5dTljYWdPeVJPNUZvaHVuCm4zT1BldmNDZ1lBeHprWjBaWm1nMWs2djJRdTk3U29OU0J0dmhUMi9KK3Z6cWYrNkpmVW9wT2lyYTFXbEFIWUkKajZabmJiL1RvWUovSmZvbVBKR1VwZFBtMGRmbVBCSnVUamVuSzFWMThhWWZUa1RTVXFXTzFYcEhxYW5kUldudApLb0ZqN2M3SzJQT2tTWUt2UUtyNGxEaGpIVWYzbU1MWWhVRUczK0Jkb1dzRkdyY3dlT0FsWmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="
  tls.crt: ""
type: "kubernetes.io/tls"
metadata:
  annotations: {}
  name: "zephyrsecurity-tls-cert"
  labels:
    nirmata.io/secret.name: "zephyrsecurity-tls-cert"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  annotations: {}
  name: "aqua-web"
  labels:
    nirmata.io/deployment.name: "aqua-web"
    app.kubernetes.io/name: "zep-aqua-web"
    nirmata.io/component: "aqua-web"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      nirmata.io/component: "aqua-web"
    matchExpressions: []
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations: {}
      name: "aqua-web"
      labels:
        app: "aqua-web"
        nirmata.io/deployment.name: "aqua-web"
        nirmata.io/application.name: "zep-aqua-web"
        nirmata.io/component: "aqua-web"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccount: "aqua"
      volumes:
      - name: "docker-socket-mount"
        hostPath:
          path: "/var/run/docker.sock"
      containers:
      - name: "aqua-web"
        image: "nginx"
        command: []
        args: []
        ports:
        - name: "aqua-web"
          containerPort: 8080
          protocol: "TCP"
        - name: "aqua-web-ssl"
          containerPort: 8443
          protocol: "TCP"
        env:
        - name: "https_proxy"
          value: "example.net:2011"
        - name: "http_proxy"
          value: "example.net:2011"
        - name: "no_proxy"
          value: "localhost,127.0.0.0/8,*.example.net,*.example.net,example.net"
        - name: "SCALOCK_GATEWAY_PUBLIC_IP"
          value: "aqua-gateway"
        - name: "SCALOCK_DBUSER"
          value: "scalock"
        - name: "SCALOCK_DBPASSWORD"
          value: ""
          valueFrom:
            secretKeyRef:
              name: "scalock"
              key: "password"
        - name: "SCALOCK_DBNAME"
          value: "scalock"
        - name: "SCALOCK_DBHOST"
          value: "sexample.com"
        - name: "SCALOCK_DBPORT"
          value: "5432"
        - name: "SCALOCK_AUDIT_DBUSER"
          value: "slk_audit"
        - name: "SCALOCK_AUDIT_DBPASSWORD"
          value: ""
          valueFrom:
            secretKeyRef:
              name: "slkaudit"
              key: "password"
        - name: "SCALOCK_AUDIT_DBNAME"
          value: "slk_audit"
        - name: "SCALOCK_AUDIT_DBHOST"
          value: "sharedpgsql965-usnv-test.cik5zxdbsajo.us-east-1.rds.amazonaws.com"
        - name: "SCALOCK_AUDIT_DBPORT"
          value: "5432"
        - name: "AQUA_GRPC_MODE"
          value: "1"
        - name: "SCALOCK_DBSSL"
          value: "require"
        - name: "SCALOCK_AUDIT_DBSSL"
          value: "require"
        - name: "AQUA_DOCKERLESS_SCANNING"
          value: "1"
        volumeMounts:
        - name: "docker-socket-mount"
          mountPath: "/var/run/docker.sock"
      dnsConfig:
        nameservers: []
        searches: []
        options:
        - name: "ndots"
          value: "1"

---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations: {}
  name: "aqua-web"
  labels:
    nirmata.io/service.name: "aqua-web"
    app.kubernetes.io/name: "zep-aqua-web"
    nirmata.io/component: "aqua-web"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "NodePort"
  selector:
    nirmata.io/component: "aqua-web"
  ports:
  - name: "aqua-web-ssl"
    port: 8443
    protocol: "TCP"
    targetPort: 8443
  - name: "aqua-web"
    port: 8080
    protocol: "TCP"
    targetPort: 8080

---
kind: "Secret"
apiVersion: "v1"
data:
  password: "V2VsY29tZTkzNA=="
type: "Opaque"
metadata:
  annotations: {}
  name: "slkaudit"
  labels:
    nirmata.io/secret.name: "slkaudit"

---
apiVersion: "networking.k8s.io/v1beta1"
kind: "Ingress"
metadata:
  annotations:
    ingress.kubernetes.io/secure-backends: "true"
    ingress.kubernetes.io/backend-protocol: "grpc"
  name: "web-frontend"
  labels:
    nirmata.io/ingress.name: "web-frontend"
spec:
  backend:
    serviceName: "aqua-web"
    servicePort: 8080
  rules:
  - host: "example.com"
    http:
      paths:
      - path: "/"
        backend:
          serviceName: "aqua-web"
          servicePort: 8443
  - host: "example.com"
    http:
      paths:
      - path: "/"
        backend:
          serviceName: "aqua-web"
          servicePort: 8443
  - host: "example.com"
    http:
      paths:
      - path: "/"
        backend:
          serviceName: "aqua-web"
          servicePort: 8443
  tls:
  - hosts:
    - "example.com"
    secretName: "zephyrsecurity-tls-cert"
  - hosts:
    - "example.com"
    - "example.com"
    secretName: "zephyrsecurity-tls-cert"

---
kind: "Secret"
apiVersion: "v1"
data:
  password: "V2VsY29tZTkzNA=="
type: "Opaque"
metadata:
  annotations: {}
  name: "scalock"
  labels:
    nirmata.io/secret.name: "scalock"
